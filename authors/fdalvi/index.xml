<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fdalvi on Fahim Dalvi</title>
    <link>https://fdalvi.github.io/authors/fdalvi/</link>
    <description>Recent content in fdalvi on Fahim Dalvi</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 11 Jun 2021 12:00:00 +0300</lastBuildDate>
    
	<atom:link href="https://fdalvi.github.io/authors/fdalvi/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Consuming Paginated API&#39;s in Javascript</title>
      <link>https://fdalvi.github.io/blog/2021-06-11-consume-paginated-apis/</link>
      <pubDate>Fri, 11 Jun 2021 12:00:00 +0300</pubDate>
      
      <guid>https://fdalvi.github.io/blog/2021-06-11-consume-paginated-apis/</guid>
      <description>Several providers adopt a notion of pagination in their API&amp;rsquo;s when the number of results from a query is large. This is common to see when the API provides a list of things, like users, billing statements, posts and so on.
A pattern that is adopted by several providers works as follows:
 Developer makes a request to provider (e.g. for the billing statements) The API returns a &amp;ldquo;page&amp;rdquo; with say 10 statements, and a link to the next page Developer makes a request to the provided link The API returns another &amp;ldquo;page&amp;rdquo; with statements, and no link Seeing no link, the developer now knows that all the required entries have been fetched  The number of pages can be dynamic, so the developer needs to keep following the links until they exist if they want to fetch all the results.</description>
    </item>
    
    <item>
      <title>COVID19 Vaccine Registration Guide for Qatar</title>
      <link>https://fdalvi.github.io/blog/2021-03-29-covid-vaccine-registration-guide/</link>
      <pubDate>Mon, 29 Mar 2021 12:00:00 +0300</pubDate>
      
      <guid>https://fdalvi.github.io/blog/2021-03-29-covid-vaccine-registration-guide/</guid>
      <description>COVID-19 vaccine registration guide in English, Urdu, Tamil, Sinhala and Hindi. More languages coming soon!
  How can I register for the COVID-19 vaccine in Qatar? (English)
میں قطر میں کووڈ ۱۹ ویکسین کیلیے کیسے رجسٹر کر سکتا ہوں؟ (Urdu)
நான் எப்படி கத்தாரில் COVID 19 தடுப்பூசி பதிவு செய்யலாம்? (Tamil)
මම කොහොමද කටාර් COVID-19 එන්නත් සඳහා ලියාපදිංචි විය හැකිය? (Sinhala)
कतर में COVID-19 के टीके के लिए पंजीकरण कैसे कर सकते हैं?</description>
    </item>
    
    <item>
      <title>Creating Video Screencaps using FFMPEG and ImageMagick</title>
      <link>https://fdalvi.github.io/blog/2018-09-01-creating-video-screencaps/</link>
      <pubDate>Sat, 01 Sep 2018 12:00:00 +0300</pubDate>
      
      <guid>https://fdalvi.github.io/blog/2018-09-01-creating-video-screencaps/</guid>
      <description>I recently wanted to create screencaps for a large set of videos of various lengths and resolutions - basically screenshot each video 5 times, and then combine these 5 screencaps all into one nice image per video, with all of the images being of consistent size.
&amp;lt;figure&amp;gt; &amp;lt;img src=&amp;quot;https://github.com/fdalvi/video-screencaps/blob/master/docs/sample%20-%20500px.jpg?raw=true&amp;quot; alt=&amp;quot;Sample render from a seaplane ride over Vancouver&amp;quot;/&amp;gt; &amp;lt;figcaption&amp;gt; &amp;lt;p&amp;gt;Sample render from a seaplane ride over Vancouver&amp;lt;/p&amp;gt; &amp;lt;/figcaption&amp;gt;  
 There are a bunch of tools available online that I can either install locally, or upload my video files to get similar results - but given that this was easily achievable using simple tools like ffmpeg and imagemagick, I decided to whip up a quick script to accomplish this.</description>
    </item>
    
    <item>
      <title>Introducing GroupMe Archiver</title>
      <link>https://fdalvi.github.io/blog/2018-08-20-introducing-groupme-archiver/</link>
      <pubDate>Mon, 20 Aug 2018 16:00:00 +0300</pubDate>
      
      <guid>https://fdalvi.github.io/blog/2018-08-20-introducing-groupme-archiver/</guid>
      <description>I was recently looking into various ways of archiving old chats into something more future proof, but it seems like these tools are very limited. They either don&amp;rsquo;t exist, or only work for specific scenarios like one-on-one chats without attachments.
Today, the situation gets a bit better for one platform, GroupMe. GroupMe is a platform focused on group messaging, and features nice subtle features like likes per message, attachments and so on.</description>
    </item>
    
    <item>
      <title>Deep Learning for NLP Crash Course @ Uni Duisburg-Essen</title>
      <link>https://fdalvi.github.io/blog/2018-04-15-dl4nlp-duisburg/</link>
      <pubDate>Sun, 15 Apr 2018 19:00:00 +0300</pubDate>
      
      <guid>https://fdalvi.github.io/blog/2018-04-15-dl4nlp-duisburg/</guid>
      <description>Hassan Sajjad and I just had a great time delivering a 5-day crash course at the Universität Duisburg-Essen. It was delivered roughly over 18 hours - with quite a lot of practical exercises! Check out the course materials.
Duisburg was a nice and calm place, with a döner restaurant ready to greet you almost around every corner. The Königstraße was super-lively with a lot of pop-up shops and restaurants, and was quite a fun walk in the afternoon.</description>
    </item>
    
    <item>
      <title>One-Hot layer in Keras&#39;s Sequential API</title>
      <link>https://fdalvi.github.io/blog/2018-04-07-keras-sequential-onehot/</link>
      <pubDate>Sat, 07 Apr 2018 20:00:00 +0300</pubDate>
      
      <guid>https://fdalvi.github.io/blog/2018-04-07-keras-sequential-onehot/</guid>
      <description>It is quite common to use a One-Hot representation for categorical data in machine learning, for example textual instances in Natural Language Processing tasks. In Keras, the Embedding layer automatically takes inputs with the category indices (such as [5, 3, 1, 5]) and converts them into dense vectors of some length (e.g. 5 → [0.2 1.7 3.2 -7.6 ...]). What actually happens internally is that 5 gets converted to a one-hot vector (like [0 0 0 0 0 1 0 0 .</description>
    </item>
    
    <item>
      <title>Speech Translation at ALT wins the Best Innovation Award</title>
      <link>https://fdalvi.github.io/blog/2018-03-21-arc-best-innovation-award/</link>
      <pubDate>Wed, 21 Mar 2018 14:00:00 +0300</pubDate>
      
      <guid>https://fdalvi.github.io/blog/2018-03-21-arc-best-innovation-award/</guid>
      <description>One of our projects in the Arabic Language Team at the Qatar Computing Research Institute is the Speech Translation Project - a real-time low-latency system where a speaker&amp;rsquo;s voice is transcribed and translated (both in Arabic or English). Check out the project here.
This project was recently awarded the Best Innovation Award at the annual Qatar Foundation Annual Research Conference! It was been a long effort to take our state-of-the-art research in Speech Recognition and Machine Translation and bring it all together in one system.</description>
    </item>
    
    <item>
      <title>Network throttling in Puppeteer</title>
      <link>https://fdalvi.github.io/blog/2018-02-05-puppeteer-network-throttle/</link>
      <pubDate>Mon, 05 Feb 2018 22:00:00 +0300</pubDate>
      
      <guid>https://fdalvi.github.io/blog/2018-02-05-puppeteer-network-throttle/</guid>
      <description>Puppeteer is an awesome way to run Chrome (or Chromium) in headless mode, i.e. load and interact with web pages without ever visually seeing them.
 Why would this be useful?
A headless browser is a great way to automate testing, even on remote server machines!
 Puppeteer provides a nice interface through Node to script any interactions you can have with a page, like entering input in a textbox, clicking a button and so on.</description>
    </item>
    
  </channel>
</rss>